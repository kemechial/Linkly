name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: linkly_test

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run Black (formatting check)
      run: black --check --line-length 88 app/ tests/
    
    - name: Run isort (import sorting check)
      run: isort --check-only --profile black app/ tests/
    
    - name: Run Flake8 (style guide)
      run: flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy (type checking)
      run: mypy app/ --config-file=mypy.ini
    
    - name: Run Bandit (security check)
      run: bandit -r app/ -f json -o bandit-report.json
    
    - name: Upload Bandit Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=test-results-unit.xml \
          -v
    
    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          test-results-unit.xml
          htmlcov/
          coverage.xml

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Wait for services
      run: sleep 10
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/linkly_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TEST_MODE: true
      run: |
        pytest tests/integration/ \
          --cov=app \
          --cov-append \
          --cov-report=xml \
          --junit-xml=test-results-integration.xml \
          -v
    
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          test-results-integration.xml
          coverage.xml

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Start application
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/linkly_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TEST_MODE: true
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run E2E tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/linkly_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TEST_MODE: true
      run: |
        pytest tests/e2e/ \
          --junit-xml=test-results-e2e.xml \
          -v
    
    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test-results-e2e.xml

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Start application
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/linkly_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py \
          --host=http://localhost:8000 \
          --users 50 \
          --spawn-rate 5 \
          --run-time 3m \
          --headless \
          --html=performance-report.html
    
    - name: Upload Performance Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-report
        path: performance-report.html

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install safety
    
    - name: Run Safety (dependency vulnerability check)
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run Bandit (security linting)
      run: bandit -r app/ -f json -o bandit-security-report.json
      continue-on-error: true
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-security-report.json

  # Build Docker Image
  build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [code-quality, unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: false
        tags: linkly:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

  # Publish Test Results
  publish-results:
    runs-on: ubuntu-latest
    name: Publish Test Results
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Download Test Results
      uses: actions/download-artifact@v3
      with:
        path: test-results
    
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: test-results/**/*.xml
        check_name: Test Results
        comment_mode: create new
        fail_on: test failures
        action_fail: true
